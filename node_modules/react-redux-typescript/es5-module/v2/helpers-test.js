import * as tslib_1 from "tslib";
console.log('\nRunning test suite...\n');
var passed = function (describe) {
    console.log(describe, true);
};
var failed = function (describe, state) {
    process.exitCode = 1;
    console.log(describe, false, state);
};
import { createEmptyAction, createPayloadAction, } from './helpers';
export var TestHelpers1;
(function (TestHelpers1) {
    var APP_STARTED = 'app/APP_STARTED';
    var SHOW_MESSAGE = 'app/SHOW_MESSAGE';
    var HIDE_MESSAGE = 'app/HIDE_MESSAGE';
    var appStarted = createEmptyAction(APP_STARTED);
    var showMessage = createPayloadAction(SHOW_MESSAGE);
    var hideMessage = createPayloadAction(HIDE_MESSAGE);
    var initialState = {
        isLoading: true,
        message: undefined,
    };
    function appReducer(state, action) {
        if (state === void 0) { state = initialState; }
        switch (action.type) {
            case APP_STARTED:
                return tslib_1.__assign({}, state, { isLoading: false });
            case SHOW_MESSAGE:
                return tslib_1.__assign({}, state, { message: action.payload });
            case HIDE_MESSAGE:
                return tslib_1.__assign({}, state, { message: action.payload });
            default: return state;
        }
    }
    var state1 = appReducer(undefined, appStarted());
    if (state1.isLoading === false) {
        passed('state1');
    }
    else {
        failed('state1', state1);
    }
    var state2 = appReducer(undefined, showMessage('App Started!'));
    if (state2.message === 'App Started!') {
        passed('state2');
    }
    else {
        failed('state2', state2);
    }
    var state3 = appReducer(undefined, hideMessage(undefined));
    if (state3.message === undefined) {
        passed('state3');
    }
    else {
        failed('state3', state3);
    }
})(TestHelpers1 || (TestHelpers1 = {}));
import { ActionCreator, } from '..';
export var TestHelpers2;
(function (TestHelpers2) {
    TestHelpers2.ActionCreators = {
        IncreaseCounter: new ActionCreator('IncreaseCounter'),
        ChangeBaseCurrency: new ActionCreator('ChangeBaseCurrency'),
    };
    var initialState = {
        counter: 0,
        baseCurrency: 'EUR',
    };
    function reducer(state, action) {
        if (state === void 0) { state = initialState; }
        if (action.type === TestHelpers2.ActionCreators.IncreaseCounter.type) {
            return tslib_1.__assign({}, state, { counter: action.payload });
        }
        if (action.type === TestHelpers2.ActionCreators.ChangeBaseCurrency.type) {
            return tslib_1.__assign({}, state, { baseCurrency: action.payload });
        }
        return state;
    }
    var action1 = TestHelpers2.ActionCreators.IncreaseCounter.create(4);
    var state1 = reducer(undefined, action1);
    if (state1.counter === 4) {
        passed('state1');
    }
    else {
        failed('state1', state1);
    }
    var action2 = TestHelpers2.ActionCreators.ChangeBaseCurrency.create('USD');
    var state2 = reducer(undefined, action2);
    if (state2.baseCurrency === 'USD') {
        passed('state2');
    }
    else {
        failed('state2', state2);
    }
})(TestHelpers2 || (TestHelpers2 = {}));
//# sourceMappingURL=helpers-test.js.map