"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const _1 = require(".");
describe('createAction', () => {
    it('no payload', () => {
        const increment = _1.createAction('INCREMENT');
        const action = increment();
        expect(action).toEqual({ type: 'INCREMENT' });
        const type = increment.getType();
        expect(type).toBe('INCREMENT');
    });
    it('no payload alternative', () => {
        const increment = _1.createAction('INCREMENT', () => ({ type: 'INCREMENT' }));
        const action = increment();
        expect(action).toEqual({ type: 'INCREMENT' });
        const type = increment.getType();
        expect(type).toBe('INCREMENT');
    });
    it('with payload', () => {
        const add = _1.createAction('ADD', (amount) => ({ type: 'ADD', payload: amount }));
        const action = add(10);
        expect(action).toEqual({ type: 'ADD', payload: 10 });
        const type = add.getType();
        expect(type).toBe('ADD');
    });
    it('with payload and meta', () => {
        const notify = _1.createAction('NOTIFY', (username, message) => ({
            type: 'NOTIFY',
            payload: { message: `${username}: ${message}` },
            meta: { username, message },
        }));
        const action = notify('Piotr', 'Hello!');
        expect(action).toEqual({
            type: 'NOTIFY',
            payload: { message: 'Piotr: Hello!' },
            meta: { username: 'Piotr', message: 'Hello!' },
        });
        const type = notify.getType();
        expect(type).toBe('NOTIFY');
    });
    it('with payload and no params', () => {
        const showNotification = _1.createAction('SHOW_NOTIFICATION', () => ({
            type: 'SHOW_NOTIFICATION',
            payload: 'default message',
        }));
        const action = showNotification();
        expect(action).toEqual({
            type: 'SHOW_NOTIFICATION',
            payload: 'default message',
        });
        const type = showNotification.getType();
        expect(type).toBe('SHOW_NOTIFICATION');
    });
    it('with payload and optional param', () => {
        const showNotification = _1.createAction('SHOW_NOTIFICATION', (message) => ({
            type: 'SHOW_NOTIFICATION',
            payload: message,
        }));
        const action = showNotification();
        expect(action).toEqual({
            type: 'SHOW_NOTIFICATION',
            payload: undefined,
        });
        const type = showNotification.getType();
        expect(type).toBe('SHOW_NOTIFICATION');
    });
    it('with meta and no params', () => {
        const showError = _1.createAction('SHOW_ERROR', () => ({
            type: 'SHOW_ERROR',
            meta: { type: 'error' },
        }));
        const action = showError();
        expect(action).toEqual({
            type: 'SHOW_ERROR',
            meta: { type: 'error' },
        });
        const type = showError.getType();
        expect(type).toBe('SHOW_ERROR');
    });
    it('with meta and optional param', () => {
        const showError = _1.createAction('SHOW_ERROR', (message) => ({
            type: 'SHOW_ERROR',
            payload: message,
            meta: { type: 'error' },
        }));
        const action = showError();
        expect(action).toEqual({
            type: 'SHOW_ERROR',
            payload: undefined,
            meta: { type: 'error' },
        });
        const type = showError.getType();
        expect(type).toBe('SHOW_ERROR');
    });
});
//# sourceMappingURL=create-action.spec.js.map