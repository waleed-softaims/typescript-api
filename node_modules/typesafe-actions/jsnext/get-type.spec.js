"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const _1 = require(".");
describe('getType', () => {
    it('no payload', () => {
        const increment = _1.createAction('INCREMENT');
        const type = _1.getType(increment);
        expect(type).toBe('INCREMENT');
    });
    it('no payload alternative', () => {
        const increment = _1.createAction('INCREMENT', () => ({ type: 'INCREMENT' }));
        const type = _1.getType(increment);
        expect(type).toBe('INCREMENT');
    });
    it('with payload', () => {
        const add = _1.createAction('ADD', (amount) => ({ type: 'ADD', payload: amount }));
        const type = _1.getType(add);
        expect(type).toBe('ADD');
    });
    it('with payload and meta', () => {
        const notify = _1.createAction('NOTIFY', (username, message) => ({
            type: 'NOTIFY',
            payload: { message: `${username}: ${message}` },
            meta: { username, message },
        }));
        const type = _1.getType(notify);
        expect(type).toBe('NOTIFY');
    });
    it('with payload and no params', () => {
        const showNotification = _1.createAction('SHOW_NOTIFICATION', () => ({
            type: 'SHOW_NOTIFICATION',
            payload: 'default message',
        }));
        const type = _1.getType(showNotification);
        expect(type).toBe('SHOW_NOTIFICATION');
    });
    it('with payload and optional param', () => {
        const showNotification = _1.createAction('SHOW_NOTIFICATION', (message) => ({
            type: 'SHOW_NOTIFICATION',
            payload: message,
        }));
        const type = _1.getType(showNotification);
        expect(type).toBe('SHOW_NOTIFICATION');
    });
    it('with meta and no params', () => {
        const showError = _1.createAction('SHOW_ERROR', () => ({
            type: 'SHOW_ERROR',
            meta: { type: 'error' },
        }));
        const type = _1.getType(showError);
        expect(type).toBe('SHOW_ERROR');
    });
    it('with meta and optional param', () => {
        const showError = _1.createAction('SHOW_ERROR', (message) => ({
            type: 'SHOW_ERROR',
            payload: message,
            meta: { type: 'error' },
        }));
        const type = _1.getType(showError);
        expect(type).toBe('SHOW_ERROR');
    });
});
//# sourceMappingURL=get-type.spec.js.map