import { createAction, getType } from '.';
describe('getType', function () {
    it('no payload', function () {
        var increment = createAction('INCREMENT');
        var type = getType(increment);
        expect(type).toBe('INCREMENT');
    });
    it('no payload alternative', function () {
        var increment = createAction('INCREMENT', function () { return ({ type: 'INCREMENT' }); });
        var type = getType(increment);
        expect(type).toBe('INCREMENT');
    });
    it('with payload', function () {
        var add = createAction('ADD', function (amount) { return ({ type: 'ADD', payload: amount }); });
        var type = getType(add);
        expect(type).toBe('ADD');
    });
    it('with payload and meta', function () {
        var notify = createAction('NOTIFY', function (username, message) { return ({
            type: 'NOTIFY',
            payload: { message: username + ": " + message },
            meta: { username: username, message: message },
        }); });
        var type = getType(notify);
        expect(type).toBe('NOTIFY');
    });
    it('with payload and no params', function () {
        var showNotification = createAction('SHOW_NOTIFICATION', function () { return ({
            type: 'SHOW_NOTIFICATION',
            payload: 'default message',
        }); });
        var type = getType(showNotification);
        expect(type).toBe('SHOW_NOTIFICATION');
    });
    it('with payload and optional param', function () {
        var showNotification = createAction('SHOW_NOTIFICATION', function (message) { return ({
            type: 'SHOW_NOTIFICATION',
            payload: message,
        }); });
        var type = getType(showNotification);
        expect(type).toBe('SHOW_NOTIFICATION');
    });
    it('with meta and no params', function () {
        var showError = createAction('SHOW_ERROR', function () { return ({
            type: 'SHOW_ERROR',
            meta: { type: 'error' },
        }); });
        var type = getType(showError);
        expect(type).toBe('SHOW_ERROR');
    });
    it('with meta and optional param', function () {
        var showError = createAction('SHOW_ERROR', function (message) { return ({
            type: 'SHOW_ERROR',
            payload: message,
            meta: { type: 'error' },
        }); });
        var type = getType(showError);
        expect(type).toBe('SHOW_ERROR');
    });
});
//# sourceMappingURL=get-type.spec.js.map