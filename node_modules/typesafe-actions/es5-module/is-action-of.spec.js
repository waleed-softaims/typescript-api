import { createAction, isActionOf } from '.';
describe('isActionOf', function () {
    it('should succeed with same action', function () {
        var increment = createAction('INCREMENT');
        var isActionOfIncrement = isActionOf(increment);
        expect(isActionOfIncrement(increment())).toBeTruthy();
    });
    it('should fail with different action', function () {
        var increment = createAction('INCREMENT');
        var add = createAction('ADD');
        var isActionOfAdd = isActionOf(increment);
        expect(isActionOfAdd(add())).toBeFalsy();
    });
    it('should correctly assert type for EmptyAction', function () {
        var increment = createAction('INCREMENT');
        var isActionOfIncrement = isActionOf(increment);
        var action = { type: 'ERROR' };
        if (isActionOfIncrement(action)) {
            var a = action;
        }
    });
    it('should correctly assert type for FluxStandardAction', function () {
        var add = createAction('ADD', function (amount) { return ({ type: 'ADD', payload: amount }); });
        var isActionOfAdd = isActionOf(add);
        var action = { type: 'ERROR' };
        if (isActionOfAdd(action)) {
            var a = action;
        }
    });
});
//# sourceMappingURL=is-action-of.spec.js.map