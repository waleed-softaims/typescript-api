import { createAction } from '.';
describe('createAction', function () {
    it('no payload', function () {
        var increment = createAction('INCREMENT');
        var action = increment();
        expect(action).toEqual({ type: 'INCREMENT' });
        var type = increment.getType();
        expect(type).toBe('INCREMENT');
    });
    it('no payload alternative', function () {
        var increment = createAction('INCREMENT', function () { return ({ type: 'INCREMENT' }); });
        var action = increment();
        expect(action).toEqual({ type: 'INCREMENT' });
        var type = increment.getType();
        expect(type).toBe('INCREMENT');
    });
    it('with payload', function () {
        var add = createAction('ADD', function (amount) { return ({ type: 'ADD', payload: amount }); });
        var action = add(10);
        expect(action).toEqual({ type: 'ADD', payload: 10 });
        var type = add.getType();
        expect(type).toBe('ADD');
    });
    it('with payload and meta', function () {
        var notify = createAction('NOTIFY', function (username, message) { return ({
            type: 'NOTIFY',
            payload: { message: username + ": " + message },
            meta: { username: username, message: message },
        }); });
        var action = notify('Piotr', 'Hello!');
        expect(action).toEqual({
            type: 'NOTIFY',
            payload: { message: 'Piotr: Hello!' },
            meta: { username: 'Piotr', message: 'Hello!' },
        });
        var type = notify.getType();
        expect(type).toBe('NOTIFY');
    });
    it('with payload and no params', function () {
        var showNotification = createAction('SHOW_NOTIFICATION', function () { return ({
            type: 'SHOW_NOTIFICATION',
            payload: 'default message',
        }); });
        var action = showNotification();
        expect(action).toEqual({
            type: 'SHOW_NOTIFICATION',
            payload: 'default message',
        });
        var type = showNotification.getType();
        expect(type).toBe('SHOW_NOTIFICATION');
    });
    it('with payload and optional param', function () {
        var showNotification = createAction('SHOW_NOTIFICATION', function (message) { return ({
            type: 'SHOW_NOTIFICATION',
            payload: message,
        }); });
        var action = showNotification();
        expect(action).toEqual({
            type: 'SHOW_NOTIFICATION',
            payload: undefined,
        });
        var type = showNotification.getType();
        expect(type).toBe('SHOW_NOTIFICATION');
    });
    it('with meta and no params', function () {
        var showError = createAction('SHOW_ERROR', function () { return ({
            type: 'SHOW_ERROR',
            meta: { type: 'error' },
        }); });
        var action = showError();
        expect(action).toEqual({
            type: 'SHOW_ERROR',
            meta: { type: 'error' },
        });
        var type = showError.getType();
        expect(type).toBe('SHOW_ERROR');
    });
    it('with meta and optional param', function () {
        var showError = createAction('SHOW_ERROR', function (message) { return ({
            type: 'SHOW_ERROR',
            payload: message,
            meta: { type: 'error' },
        }); });
        var action = showError();
        expect(action).toEqual({
            type: 'SHOW_ERROR',
            payload: undefined,
            meta: { type: 'error' },
        });
        var type = showError.getType();
        expect(type).toBe('SHOW_ERROR');
    });
});
//# sourceMappingURL=create-action.spec.js.map